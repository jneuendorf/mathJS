// Generated by CoffeeScript 1.9.3
(function() {
  describe("Domains", function() {
    it("N", function() {
      var set;
      set = mathJS.Domains.N;
      expect(set.size).toBe(Infinity);
      expect(set.contains(0)).toBe(true);
      expect(set.contains(0.5)).toBe(false);
      expect(set.contains(-5)).toBe(false);
      expect(set.infimum).toBe(0);
      return expect(set.supremum).toBe(Infinity);
    });
    it("Z", function() {
      var set;
      set = mathJS.Domains.Z;
      expect(set.size).toBe(Infinity);
      expect(set.contains(0)).toBe(true);
      expect(set.contains(0.5)).toBe(false);
      expect(set.contains(-5)).toBe(true);
      expect(set.infimum).toBe(Infinity);
      return expect(set.supremum).toBe(Infinity);
    });
    it("Q", function() {
      var set;
      set = mathJS.Domains.Q;
      expect(set.size).toBe(Infinity);
      expect(set.contains(0)).toBe(true);
      expect(set.contains(0.5)).toBe(true);
      expect(set.contains(-5)).toBe(true);
      expect(set.infimum).toBe(Infinity);
      return expect(set.supremum).toBe(Infinity);
    });
    it("I", function() {
      var set;
      set = mathJS.Domains.I;
      expect(set.size).toBe(Infinity);
      expect(set.contains(0)).toBe(true);
      expect(set.contains(0.5)).toBe(false);
      expect(set.contains(-5)).toBe(true);
      expect(set.contains(mathJS.pi)).toBe(true);
      expect(set.infimum).toBe(Infinity);
      return expect(set.supremum).toBe(Infinity);
    });
    return it("R", function() {
      var set;
      set = mathJS.Domains.R;
      expect(set.size).toBe(Infinity);
      expect(set.contains(0)).toBe(true);
      expect(set.contains(0.5)).toBe(true);
      expect(set.contains(-5)).toBe(true);
      expect(set.contains(mathJS.pi)).toBe(true);
      expect(set.infimum).toBe(Infinity);
      return expect(set.supremum).toBe(Infinity);
    });
  });

  describe("Sets", function() {
    return describe("should be able be parsed from string:", function() {
      it("ellipsis", function() {
        var set;
        set = mathJS.Set.fromString("{1, 2, 3, ...}");
        return expect(set.size).toBe(Infinity);
      });
      return it("simple expression (variable) + domain", function() {
        var set, set2;
        set = mathJS.Set.fromString("{ x | x in R}");
        expect(set.size).toBe(Infinity);
        set2 = mathJS.Set.fromString("{ x : x in R}");
        return expect(set.size).toBe(Infinity);
      });
    });
  });

}).call(this);

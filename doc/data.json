{
    "project": {
        "name": "mathJS API",
        "description": "A JavaScript math library",
        "version": "0.0.1",
        "logo": "../logo.png"
    },
    "files": {
        "doc_base/Calculus/Integral.js": {
            "name": "doc_base/Calculus/Integral.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "doc_base/Formals/Term.js": {
            "name": "doc_base/Formals/Term.js",
            "modules": {},
            "classes": {
                "Term": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "doc_base/Formals/Variable.js": {
            "name": "doc_base/Formals/Variable.js",
            "modules": {},
            "classes": {
                "Variable": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "doc_base/LinearAlgebra/Vector.js": {
            "name": "doc_base/LinearAlgebra/Vector.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "doc_base/Numbers/Complex.js": {
            "name": "doc_base/Numbers/Complex.js",
            "modules": {},
            "classes": {
                "Complex": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "doc_base/Numbers/Int.js": {
            "name": "doc_base/Numbers/Int.js",
            "modules": {},
            "classes": {
                "Int": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "doc_base/Numbers/Number.js": {
            "name": "doc_base/Numbers/Number.js",
            "modules": {},
            "classes": {
                "Number": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "doc_base/Set/Domains/N.js": {
            "name": "doc_base/Set/Domains/N.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "doc_base/Set/ConditionalSet.js": {
            "name": "doc_base/Set/ConditionalSet.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "doc_base/Set/DiscreteSet.js": {
            "name": "doc_base/Set/DiscreteSet.js",
            "modules": {},
            "classes": {
                "DiscreteSet": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "doc_base/Set/EmptySet.js": {
            "name": "doc_base/Set/EmptySet.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "doc_base/Set/Interval.js": {
            "name": "doc_base/Set/Interval.js",
            "modules": {},
            "classes": {
                "Interval": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "doc_base/Set/Set.js": {
            "name": "doc_base/Set/Set.js",
            "modules": {},
            "classes": {
                "Set": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "doc_base/interfaces/Comparable.js": {
            "name": "doc_base/interfaces/Comparable.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "doc_base/interfaces/Orderable.js": {
            "name": "doc_base/interfaces/Orderable.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "doc_base/Constants.js": {
            "name": "doc_base/Constants.js",
            "modules": {},
            "classes": {
                "CONSTANTS": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "doc_base/init.js": {
            "name": "doc_base/init.js",
            "modules": {
                "mathJS": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "doc_base/mathJS.js": {
            "name": "doc_base/mathJS.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "doc_base/prototyping.js": {
            "name": "doc_base/prototyping.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "mathJS": {
            "name": "mathJS",
            "submodules": {},
            "classes": {
                "Term": 1,
                "Variable": 1,
                "Complex": 1,
                "Int": 1,
                "Number": 1,
                "DiscreteSet": 1,
                "Interval": 1,
                "Set": 1,
                "CONSTANTS": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "doc_base/Constants.js",
            "line": 3,
            "itemtype": "main"
        }
    },
    "classes": {
        "Term": {
            "name": "Term",
            "shortname": "Term",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "mathJS",
            "file": "doc_base/Formals/Term.js",
            "line": 3,
            "description": "Tree structure of terms"
        },
        "Variable": {
            "name": "Variable",
            "shortname": "Variable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "mathJS",
            "file": "doc_base/Formals/Variable.js",
            "line": 3,
            "is_constructor": 1,
            "params": [
                {
                    "name": "symbol\nThis",
                    "description": "is name name of the variable (mathematically)",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "Function|Class"
                },
                {
                    "name": "value\nOptional.",
                    "description": "This param is passed upon evaluation.",
                    "type": "Object"
                }
            ]
        },
        "Complex": {
            "name": "Complex",
            "shortname": "Complex",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "mathJS",
            "file": "doc_base/Numbers/Complex.js",
            "line": 3,
            "abstract": "",
            "is_constructor": 1,
            "params": [
                {
                    "name": "real\nReal",
                    "description": "part of the number. Either a mathJS.Number or primitive number.",
                    "type": "Number"
                },
                {
                    "name": "image\nReal",
                    "description": "part of the number. Either a mathJS.Number or primitive number.",
                    "type": "Number"
                }
            ],
            "extends": "Number"
        },
        "Int": {
            "name": "Int",
            "shortname": "Int",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "mathJS",
            "file": "doc_base/Numbers/Int.js",
            "line": 3,
            "is_constructor": 1,
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                }
            ],
            "extends": "Number"
        },
        "Number": {
            "name": "Number",
            "shortname": "Number",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "mathJS",
            "file": "doc_base/Numbers/Number.js",
            "line": 3,
            "abstract": "",
            "is_constructor": 1,
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                }
            ],
            "extends": "Object"
        },
        "DiscreteSet": {
            "name": "DiscreteSet",
            "shortname": "DiscreteSet",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "mathJS",
            "file": "doc_base/Set/DiscreteSet.js",
            "line": 3,
            "description": "This class is a Setof explicitely listed elements (with no needed logic).",
            "is_constructor": 1,
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "Function|Class"
                },
                {
                    "name": "universe\nOptional.",
                    "description": "If given, the created Set will be interpreted as a sub set of the universe.",
                    "type": "Set"
                },
                {
                    "name": "elems...\nOptional.",
                    "description": "This and the following parameters serve as elements for the new Set. They will be in the new Set immediately.",
                    "type": "Mixed"
                }
            ],
            "extends": "Set"
        },
        "Interval": {
            "name": "Interval",
            "shortname": "Interval",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "mathJS",
            "file": "doc_base/Set/Interval.js",
            "line": 3,
            "is_constructor": 1,
            "params": [
                {
                    "name": "leftBoundary",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "leftKind",
                    "description": "Either \"open\" or \"bounded\" (case insensitive).",
                    "type": "String"
                },
                {
                    "name": "rightBoundary",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "rightKind",
                    "description": "Either \"open\" or \"bounded\" (case insensitive).",
                    "type": "String"
                },
                {
                    "name": "set",
                    "description": "",
                    "type": "Set"
                }
            ],
            "extends": "Set"
        },
        "Set": {
            "name": "Set",
            "shortname": "Set",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "mathJS",
            "file": "doc_base/Set/Set.js",
            "line": 3,
            "is_constructor": 1,
            "params": [
                {
                    "name": "boundarySettings",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "condition\nOptional.",
                    "description": "If given, the created Set will bounded by that condition",
                    "type": "Function"
                },
                {
                    "name": "elems\nOptional.",
                    "description": "This parameter serves as elements for the new Set. They will be in the new Set immediately.\nIt is an array of comparable elements (that means if `mathJS.isComparable() === true`); non-comparables will be ignored.",
                    "type": "Array"
                }
            ]
        },
        "CONSTANTS": {
            "name": "CONSTANTS",
            "shortname": "CONSTANTS",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "mathJS",
            "file": "doc_base/Constants.js",
            "line": 3,
            "description": "This is a class (not actually but logically) that contains all definitions of constants.\nThose constants can be con- or disjoined (see functions 'and' and 'or') but already con- or disjoined can't be con- or disjoined any further (so nesting is not supported)."
        }
    },
    "classitems": [
        {
            "file": "doc_base/Calculus/Integral.js",
            "line": 110,
            "description": "For better calculation performance of the integral decrease delay and numBlocks.\nFor better overall performance increase them.",
            "access": "public",
            "tagname": "",
            "static": 1,
            "itemtype": "method",
            "name": "solveAsync",
            "params": [
                {
                    "name": "integrand",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "from",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "to",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "abs",
                    "description": "\nOptional. Indicates whether areas below the graph are negative or not.\nDefault is false.",
                    "type": "Boolean"
                },
                {
                    "name": "stepSize",
                    "description": "\nOptional. Defines the width of each trapezoid. Default is 0.01.",
                    "type": "Number"
                },
                {
                    "name": "delay",
                    "description": "\nOptional. Defines the time to pass between blocks of calculations.\nDefault is 2ms.",
                    "type": "Number"
                },
                {
                    "name": "numBlocks",
                    "description": "\nOptional. Defines the number of calculation blocks.\nDefault is 100.",
                    "type": "Number"
                }
            ],
            "class": "Term"
        },
        {
            "file": "doc_base/LinearAlgebra/Vector.js",
            "line": 97,
            "description": "This method calculates the distance between 2 points.\nIt's a shortcut for substracting 2 vectors and getting that vector's magnitude (because no new object is created).\nFor that reason this method should be used for pure distance calculations.",
            "itemtype": "method",
            "name": "distanceTo",
            "params": [
                {
                    "name": "p",
                    "description": "",
                    "type": "Point"
                }
            ],
            "return": {
                "description": "Distance between this point and p.",
                "type": "Number"
            },
            "class": "Complex"
        },
        {
            "file": "doc_base/LinearAlgebra/Vector.js",
            "line": 158,
            "description": "Returns the angle of a vector. Beware that the angle is measured in counter clockwise direction beginning at 0˚ which equals the x axis in positive direction.\nSo on a computer grid the angle won't be what you expect! Use anglePC() in that case!",
            "itemtype": "method",
            "name": "angle",
            "return": {
                "description": "Angle of the vector in degrees. 0 degrees means pointing to the right.",
                "type": "Number"
            },
            "class": "Complex"
        },
        {
            "file": "doc_base/LinearAlgebra/Vector.js",
            "line": 181,
            "description": "Returns the angle of a vector. 0˚ means pointing to the top. Clockwise.",
            "itemtype": "method",
            "name": "anglePC",
            "return": {
                "description": "Angle of the vector in degrees. 0 degrees means pointing to the right.",
                "type": "Number"
            },
            "class": "Complex"
        },
        {
            "file": "doc_base/LinearAlgebra/Vector.js",
            "line": 203,
            "description": "Returns a random Point within a given radius.",
            "itemtype": "method",
            "name": "randPointInRadius",
            "params": [
                {
                    "name": "radius\nDefault",
                    "description": "is 10 (pixels). Must not be smaller than 0.",
                    "type": "Number"
                },
                {
                    "name": "random\nIndicates",
                    "description": "whether the given radius is the maximum or exact distance between the 2 points.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "Random Point.",
                "type": "Number"
            },
            "class": "Complex"
        },
        {
            "file": "doc_base/Numbers/Complex.js",
            "line": 27,
            "override": "This method creates an object with the keys 'real' and 'img' which have primitive numbers as their values.",
            "static": 1,
            "itemtype": "method",
            "name": "_getValueFromParam",
            "params": [
                {
                    "name": "real",
                    "description": "",
                    "type": "Complex|Number"
                },
                {
                    "name": "img",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Complex"
        },
        {
            "file": "doc_base/Numbers/Complex.js",
            "line": 143,
            "description": "This method check for mathmatical equality. This means new mathJS.Double(4.2).equals(4.2)",
            "itemtype": "method",
            "name": "equals",
            "params": [
                {
                    "name": "n",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Complex"
        },
        {
            "file": "doc_base/Numbers/Number.js",
            "line": 24,
            "description": "This method gets the value from a parameter. The validity is determined by this._valueIsValid().",
            "static": 1,
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "_getValueFromParam",
            "params": [
                {
                    "name": "param",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "skipCheck\nIf",
                    "description": "`true` the given parameter is not (again) checked for validity. If the function that calls _getValueFromParam() has already checked the passed parameter this `skipCheck` should be set to true.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "The primitive value or null.",
                "type": "Number"
            },
            "class": "Number"
        },
        {
            "file": "doc_base/Numbers/Number.js",
            "line": 50,
            "override": "mathJS.Poolable",
            "static": 1,
            "itemtype": "method",
            "name": "fromPool",
            "class": "Number"
        },
        {
            "file": "doc_base/Numbers/Number.js",
            "line": 72,
            "override": "mathJS.Parseable",
            "static": 1,
            "itemtype": "method",
            "name": "parse",
            "class": "Number"
        },
        {
            "file": "doc_base/Numbers/Number.js",
            "line": 135,
            "override": "mathJS.Comparable\nThis method checks for mathmatical equality. This means new mathJS.Double(4.2).equals(4.2) is true.",
            "itemtype": "method",
            "name": "equals",
            "params": [
                {
                    "name": "n",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Number"
        },
        {
            "file": "doc_base/Numbers/Number.js",
            "line": 149,
            "override": "mathJS.Orderable\nThis method check for mathmatical '<'. This means new mathJS.Double(4.2).lessThan(5.2) is true.",
            "itemtype": "method",
            "name": "lessThan",
            "class": "Number"
        },
        {
            "file": "doc_base/Numbers/Number.js",
            "line": 161,
            "override": "mathJS.Orderable\nThis method check for mathmatical '>'. This means new mathJS.Double(4.2).greaterThan(3.2) is true.",
            "itemtype": "method",
            "name": "greaterThan",
            "params": [
                {
                    "name": "n",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Number"
        },
        {
            "file": "doc_base/Numbers/Number.js",
            "line": 175,
            "override": "mathJS.Orderable\nThis method check for mathmatical equality. This means new mathJS.Double(4.2).lessThanOrEqualTo(3.2) is true.",
            "itemtype": "method",
            "name": "lessThanOrEqualTo",
            "params": [
                {
                    "name": "n",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Number"
        },
        {
            "file": "doc_base/Numbers/Number.js",
            "line": 189,
            "description": "This method check for mathmatical equality. This means new mathJS.Double(4.2).lessThanOrEqualTo(3.2) is true.",
            "itemtype": "method",
            "name": "greaterThanOrEqualTo",
            "params": [
                {
                    "name": "n",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Number"
        },
        {
            "file": "doc_base/Numbers/Number.js",
            "line": 202,
            "description": "This method adds 2 numbers and returns a new one.",
            "itemtype": "method",
            "name": "plus",
            "params": [
                {
                    "name": "n",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Calculated Number.",
                "type": "Number"
            },
            "class": "Number"
        },
        {
            "file": "doc_base/Numbers/Number.js",
            "line": 215,
            "description": "This method adds the given number to this instance.",
            "itemtype": "method",
            "name": "increase",
            "params": [
                {
                    "name": "n",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "This instance.",
                "type": "Number"
            },
            "class": "Number"
        },
        {
            "file": "doc_base/Numbers/Number.js",
            "line": 229,
            "description": "See increase().",
            "itemtype": "method",
            "name": "plusSelf",
            "class": "Number"
        },
        {
            "file": "doc_base/Numbers/Number.js",
            "line": 238,
            "description": "This method substracts 2 numbers and returns a new one.",
            "itemtype": "method",
            "name": "minus",
            "params": [
                {
                    "name": "n",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Calculated Number.",
                "type": "Number"
            },
            "class": "Number"
        },
        {
            "file": "doc_base/Numbers/Number.js",
            "line": 258,
            "description": "This method multiplies 2 numbers and returns a new one.",
            "itemtype": "method",
            "name": "times",
            "params": [
                {
                    "name": "n",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Calculated Number.",
                "type": "Number"
            },
            "class": "Number"
        },
        {
            "file": "doc_base/Numbers/Number.js",
            "line": 276,
            "description": "This method divides 2 numbers and returns a new one.",
            "itemtype": "method",
            "name": "divide",
            "params": [
                {
                    "name": "n",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Calculated Number.",
                "type": "Number"
            },
            "class": "Number"
        },
        {
            "file": "doc_base/Numbers/Number.js",
            "line": 294,
            "description": "This method squares this instance and returns a new one.",
            "itemtype": "method",
            "name": "square",
            "return": {
                "description": "Calculated Number.",
                "type": "Number"
            },
            "class": "Number"
        },
        {
            "file": "doc_base/Numbers/Number.js",
            "line": 311,
            "description": "This method cubes this instance and returns a new one.",
            "itemtype": "method",
            "name": "cube",
            "return": {
                "description": "Calculated Number.",
                "type": "Number"
            },
            "class": "Number"
        },
        {
            "file": "doc_base/Numbers/Number.js",
            "line": 328,
            "description": "This method calculates the square root of this instance and returns a new one.",
            "itemtype": "method",
            "name": "sqrt",
            "return": {
                "description": "Calculated Number.",
                "type": "Number"
            },
            "class": "Number"
        },
        {
            "file": "doc_base/Numbers/Number.js",
            "line": 345,
            "description": "This method calculates the cubic root of this instance and returns a new one.",
            "itemtype": "method",
            "name": "curt",
            "return": {
                "description": "Calculated Number.",
                "type": "Number"
            },
            "class": "Number"
        },
        {
            "file": "doc_base/Numbers/Number.js",
            "line": 361,
            "description": "This method calculates any root of this instance and returns a new one.",
            "itemtype": "method",
            "name": "plus",
            "params": [
                {
                    "name": "exponent",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Calculated Number.",
                "type": "Number"
            },
            "class": "Number"
        },
        {
            "file": "doc_base/Numbers/Number.js",
            "line": 378,
            "description": "This method adds 2 numbers and returns a new one.",
            "itemtype": "method",
            "name": "plus",
            "params": [
                {
                    "name": "n",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Calculated Number.",
                "type": "Number"
            },
            "class": "Number"
        },
        {
            "file": "doc_base/Numbers/Number.js",
            "line": 396,
            "description": "This method adds 2 numbers and returns a new one.",
            "itemtype": "method",
            "name": "plus",
            "params": [
                {
                    "name": "n",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Calculated Number.",
                "type": "Number"
            },
            "class": "Number"
        },
        {
            "file": "doc_base/Set/Domains/N.js",
            "line": 106,
            "description": "This method checks if `this` is a subset of the given set `set`. Since equality must be checked by checking an arbitrary number of values this method actually does the same as `this.equals()`. For `this.equals()` the number of compared elements is 10x bigger.",
            "class": "DiscreteSet"
        },
        {
            "file": "doc_base/Set/Domains/N.js",
            "line": 233,
            "description": "a.without b => returns: removed all common elements from a",
            "class": "DiscreteSet"
        },
        {
            "file": "doc_base/Set/ConditionalSet.js",
            "line": 99,
            "description": "a.without b => returns: removed all common elements from a",
            "class": "DiscreteSet"
        },
        {
            "file": "doc_base/Set/DiscreteSet.js",
            "line": 90,
            "override": "",
            "class": "DiscreteSet"
        },
        {
            "file": "doc_base/Set/DiscreteSet.js",
            "line": 155,
            "description": "a.without b => returns: removed all common elements from a",
            "class": "DiscreteSet"
        },
        {
            "file": "doc_base/Set/EmptySet.js",
            "line": 10,
            "override": "see mathJS.Poolable",
            "static": 1,
            "itemtype": "method",
            "name": "fromPool",
            "class": "Interval"
        },
        {
            "file": "doc_base/Set/EmptySet.js",
            "line": 111,
            "description": "a.without b => returns: removed all common elements from a",
            "class": "Interval"
        },
        {
            "file": "doc_base/Set/EmptySet.js",
            "line": 123,
            "override": "mathJS.Poolable\nsee mathJS.Poolable",
            "itemtype": "method",
            "name": "release",
            "class": "Interval"
        },
        {
            "file": "doc_base/Set/Set.js",
            "line": 146,
            "description": "a.without b => returns: removed all common elements from a",
            "class": "Set"
        },
        {
            "file": "doc_base/interfaces/Comparable.js",
            "line": 7,
            "description": "This method checks for mathmatical equality. This means new mathJS.Double(4.2).equals(4.2) is true.",
            "itemtype": "method",
            "name": "equals",
            "params": [
                {
                    "name": "n",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "CONSTANTS"
        },
        {
            "file": "doc_base/interfaces/Orderable.js",
            "line": 14,
            "description": "This method checks for mathmatical '<'. This means new mathJS.Double(4.2).lessThan(5.2) is true.",
            "itemtype": "method",
            "name": "lessThan",
            "params": [
                {
                    "name": "n",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "CONSTANTS"
        },
        {
            "file": "doc_base/interfaces/Orderable.js",
            "line": 27,
            "description": "Alias for `lessThan`.",
            "itemtype": "method",
            "name": "lt",
            "class": "CONSTANTS"
        },
        {
            "file": "doc_base/interfaces/Orderable.js",
            "line": 36,
            "description": "This method checks for mathmatical '>'. This means new mathJS.Double(4.2).greaterThan(3.2) is true.",
            "itemtype": "method",
            "name": "greaterThan",
            "params": [
                {
                    "name": "n",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "CONSTANTS"
        },
        {
            "file": "doc_base/interfaces/Orderable.js",
            "line": 49,
            "description": "Alias for `greaterThan`.",
            "itemtype": "method",
            "name": "lt",
            "class": "CONSTANTS"
        },
        {
            "file": "doc_base/interfaces/Orderable.js",
            "line": 58,
            "description": "This method checks for mathmatical '<='. This means new mathJS.Double(4.2).lessThanOrEqualTo(5.2) is true.",
            "itemtype": "method",
            "name": "lessThanOrEqualTo",
            "params": [
                {
                    "name": "n",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "CONSTANTS"
        },
        {
            "file": "doc_base/interfaces/Orderable.js",
            "line": 71,
            "description": "Alias for `lessThanOrEqualTo`.",
            "itemtype": "method",
            "name": "lt",
            "class": "CONSTANTS"
        },
        {
            "file": "doc_base/interfaces/Orderable.js",
            "line": 80,
            "description": "This method checks for mathmatical '>='. This means new mathJS.Double(4.2).greaterThanOrEqualTo(3.2) is true.",
            "itemtype": "method",
            "name": "greaterThanOrEqualTo",
            "params": [
                {
                    "name": "n",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "CONSTANTS"
        },
        {
            "file": "doc_base/interfaces/Orderable.js",
            "line": 93,
            "description": "Alias for `greaterThanOrEqualTo`.",
            "itemtype": "method",
            "name": "lt",
            "class": "CONSTANTS"
        },
        {
            "file": "doc_base/Constants.js",
            "line": 35,
            "description": "This method gets the keys of a constant's object from a given value.",
            "static": 1,
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "val",
                    "description": "",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "An array containing all keys of the according CONSTANTS object that are encoded in 'val'. The first index indicates if the keys are con- or disjoined (true means 'or', false means 'and')",
                "type": "Array"
            },
            "class": "CONSTANTS"
        },
        {
            "file": "doc_base/Constants.js",
            "line": 90,
            "description": "This method adds a new (!!) key to a given constant's object dynamically. If the key already exists an error is thrown.",
            "static": 1,
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "val",
                    "description": "",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "An array containing all keys of the according CONSTANTS object that are encoded in 'val'. The first index indicates if the keys are con- or disjoined (true means 'or', false means 'and')",
                "type": "Array"
            },
            "class": "CONSTANTS"
        },
        {
            "file": "doc_base/mathJS.js",
            "line": 180,
            "description": "This function checks if a given parameter is a (plain) number.",
            "itemtype": "method",
            "name": "isNum",
            "params": [
                {
                    "name": "num",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Whether the given number is a Number (excluding +/-Infinity)",
                "type": "Boolean"
            },
            "class": "",
            "module": "mathJS"
        },
        {
            "file": "doc_base/mathJS.js",
            "line": 201,
            "description": "This function returns a random (plain) integer between max and min (both inclusive). If max is less than min the parameters are swapped.",
            "itemtype": "method",
            "name": "randInt",
            "params": [
                {
                    "name": "max",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "min",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Random integer.",
                "type": "Number"
            },
            "class": "",
            "module": "mathJS"
        },
        {
            "file": "doc_base/mathJS.js",
            "line": 227,
            "description": "This function returns a random number between max and min (both inclusive). If max is less than min the parameters are swapped.",
            "itemtype": "method",
            "name": "randNum",
            "params": [
                {
                    "name": "max",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "min\nDefault",
                    "description": "is 0.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Random number.",
                "type": "Integer"
            },
            "class": "",
            "module": "mathJS"
        },
        {
            "file": "doc_base/prototyping.js",
            "line": 106,
            "itemtype": "method",
            "name": "getMax",
            "params": [
                {
                    "name": "propertyGetter\nThe",
                    "description": "passed callback extracts the value being compared from the array elements.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "An array of all maxima.",
                "type": "Array"
            },
            "class": "",
            "module": "mathJS"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: abstract",
            "line": " doc_base/Numbers/Complex.js:3"
        },
        {
            "message": "unknown tag: override",
            "line": " doc_base/Numbers/Complex.js:27"
        },
        {
            "message": "unknown tag: abstract",
            "line": " doc_base/Numbers/Number.js:3"
        },
        {
            "message": "unknown tag: override",
            "line": " doc_base/Numbers/Number.js:50"
        },
        {
            "message": "unknown tag: override",
            "line": " doc_base/Numbers/Number.js:72"
        },
        {
            "message": "unknown tag: override",
            "line": " doc_base/Numbers/Number.js:135"
        },
        {
            "message": "unknown tag: override",
            "line": " doc_base/Numbers/Number.js:149"
        },
        {
            "message": "unknown tag: override",
            "line": " doc_base/Numbers/Number.js:161"
        },
        {
            "message": "unknown tag: override",
            "line": " doc_base/Numbers/Number.js:175"
        },
        {
            "message": "unknown tag: override",
            "line": " doc_base/Set/DiscreteSet.js:90"
        },
        {
            "message": "unknown tag: override",
            "line": " doc_base/Set/EmptySet.js:10"
        },
        {
            "message": "unknown tag: override",
            "line": " doc_base/Set/EmptySet.js:123"
        },
        {
            "message": "Missing item type\nThis method checks if `this` is a subset of the given set `set`. Since equality must be checked by checking an arbitrary number of values this method actually does the same as `this.equals()`. For `this.equals()` the number of compared elements is 10x bigger.",
            "line": " doc_base/Set/Domains/N.js:106"
        },
        {
            "message": "Missing item type\na.without b => returns: removed all common elements from a",
            "line": " doc_base/Set/Domains/N.js:233"
        },
        {
            "message": "Missing item type\na.without b => returns: removed all common elements from a",
            "line": " doc_base/Set/ConditionalSet.js:99"
        },
        {
            "message": "Missing item type",
            "line": " doc_base/Set/DiscreteSet.js:90"
        },
        {
            "message": "Missing item type\na.without b => returns: removed all common elements from a",
            "line": " doc_base/Set/DiscreteSet.js:155"
        },
        {
            "message": "Missing item type\na.without b => returns: removed all common elements from a",
            "line": " doc_base/Set/EmptySet.js:111"
        },
        {
            "message": "Missing item type\na.without b => returns: removed all common elements from a",
            "line": " doc_base/Set/Set.js:146"
        }
    ]
}
// Generated by CoffeeScript 1.8.0
(function() {
  var __slice = [].slice;

  mathJS.SetSpec = (function() {
    function SetSpec(isFinite, f, f2) {
      if (isFinite === true || isFinite === "true") {
        this.isFinite = true;
        this.checker = f;
        this.generator = f2;
      } else if (isFinite === false || isFinite === "false") {
        this.checker = f;
        if (isFinite === true) {
          this.generator = generator;
        }
      } else {
        debugger;
        throw new Error("mathJS: Expected (Function, boolean) for SetSpec! Given " + check + " and " + isFinite);
      }
    }

    return SetSpec;

  })();

  mathJS.SetBuilder = (function() {
    function SetBuilder() {
      var conditions, domain, expression;
      expression = arguments[0], domain = arguments[1], conditions = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
    }

    return SetBuilder;

  })();


  /*
  {7,3,15,31}
  {a,b,c}
  {1,2,3,...,100}
  {0,1,2,...}
  
  {x : x in R and x = x^2 } or {x | x in R and x = x^2 }
  { (x,y) | 0 < y < f(x) }
  { (t,2t+1) | t in Z }
  
  [a,b] = { x | x in R and a <= x <= b }
  
  equal predicates <=> equal sets (if expressions (in front) also equal)!!!
  { x | x in R and |x| = 1 } <=> { x | x in R and x^2 = 1 }
  
  
  dicht oder nicht?
  nicht dicht + bounded => diskret
  N -> left boundary
  mathJS.Root class for difference Q <-> R
   */

}).call(this);

// Generated by CoffeeScript 1.8.0

/**
*
* @class Interval
* @constructor
* @param {Number} leftBoundary
* @param {String} leftKind
* Either "open" or "bounded" (case insensitive).
* @param {Number} rightBoundary
* @param {String} rightKind
* Either "open" or "bounded" (case insensitive).
* @param {Set} set
* @extends Set
*
 */

(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  mathJS.Interval = (function(_super) {
    var _kindIsValid, _valueIsValid;

    __extends(Interval, _super);

    Interval._valueIsValid = function(value) {
      return (value instanceof mathJS.Number && !(value instanceof mathJS.Complex)) || mathJS.isNum(value);
    };

    Interval._kindIsValid = function(kind) {
      var _ref;
      return (_ref = kind.toLowerCase()) === "open" || _ref === "bounded";
    };

    function Interval(leftBoundary, leftKind, rightBoundary, rightKind, set) {
      var fStr;
      if (this._valueIsValid(leftBoundary) && this._valueIsValid(rightBoundary) && this._kindIsValid(leftKind) && this._kindIsValid(rightKind)) {
        this.leftBoundary = leftBoundary.value || leftBoundary;
        this.leftKind = leftKind;
        this.rightBoundary = rightBoundary.value || rightBoundary;
        this.rightKind = rightKind;
      } else {
        fStr = arguments.callee.caller.toString();
        throw new Error("mathJS: Expected (number, string, number, string) number! Given (" + leftBoundary + ", " + leftKind + ", " + rightBoundary + ", " + rightKind + ") in '" + (fStr.substring(0, fStr.indexOf(")") + 1)) + "'");
      }
    }

    _valueIsValid = Interval._valueIsValid;

    _kindIsValid = Interval._kindIsValid;

    Interval.prototype.shiftRight = function(value) {
      var v;
      if (this._valueIsValid(value)) {
        v = value.value || value;
        this.leftBoundary += v;
        this.rightBoundary += v;
      }
      return this;
    };

    Interval.prototype.shiftLeft = function(value) {
      var v;
      if (this._valueIsValid(value)) {
        v = value.value || value;
        this.leftBoundary -= v;
        this.rightBoundary -= v;
      }
      return this;
    };

    Interval.prototype.setLeftBoundary = function(value, kind) {
      if (this._valueIsValid(value) && this._kindIsValid(kind)) {
        this.leftBoundary = value.value || value;
        this.leftKind = kind;
      }
      return this;
    };

    Interval.prototype.seRightBoundary = function(value, kind) {
      if (this._valueIsValid(value) && this._kindIsValid(kind)) {
        this.rightBoundary = value.value || value;
        this.rightKind = kind;
      }
      return this;
    };

    return Interval;

  })(mathJS.ConditionalSet);

}).call(this);

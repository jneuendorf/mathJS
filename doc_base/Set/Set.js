// Generated by CoffeeScript 1.7.1

/**
* This class serves as interface.
* @class Set
*
 */

(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  mathJS.Set = (function() {
    function Set(type) {
      this.type = type;
      this.elems = [];
      this.subsets = [];
    }

    Set.prototype._getValueFromParam = function(value) {
      var isNum;
      if (value instanceof this.type) {
        return value;
      }
      isNum = mathJS.isNum(value);
      if ((this.type === mathJS.Double || this.type === mathJS.Number) && isNum) {
        return new this.type(value);
      }
      if (this.type === mathJS.Int && isNum && ~~value === value) {
        return new this.type(value);
      }
      return null;
    };

    Set.prototype.equals = function(set) {
      throw new Error("todo!");
    };

    Set.prototype.add = function(elem) {
      var e, subset, _i, _j, _len, _len1, _ref, _ref1;
      elem = this._getValueFromParam(elem);
      if (elem != null) {
        _ref = this.subsets;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          subset = _ref[_i];
          if (subset.contains(elem)) {
            return this;
          }
        }
        _ref1 = this.elems;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          e = _ref1[_j];
          if ((typeof e.equals === "function" ? e.equals(elem) : void 0) || e === elem) {
            return this;
          }
        }
        this.elems.push(elem);
      }
      return this;
    };

    Set.prototype.remove = function(elem) {
      var e, elems, subset, _i, _j, _len, _len1, _ref, _ref1;
      if (elem instanceof this.type) {
        _ref = this.subsets;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          subset = _ref[_i];
          subset.remove(elem);
        }
        elems = [];
        _ref1 = this.elems;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          e = _ref1[_j];
          if (e.equals(elem) || e === elem) {
            continue;
          }
          elems.push(e);
        }
        this.elems = elems;
      }
      return this;
    };

    Set.prototype.contains = function(elem) {
      return elem instanceof this.type && __indexOf.call(this.elems, elem) >= 0;
    };

    Set.prototype.union = function(set) {};

    Set.prototype.intersect = function() {};

    Set.prototype.complement = function() {};


    /**
    * a.without b => returns: removed all common elements from a
    *
     */

    Set.prototype.without = function(set) {};

    Set.prototype.size = function() {
      var size, subset, _i, _len, _ref;
      size = this.elems.length;
      _ref = this.subsets;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        subset = _ref[_i];
        size += subset.size();
        if (size === Infinity) {
          return size;
        }
      }
      return size;
    };

    return Set;

  })();

}).call(this);

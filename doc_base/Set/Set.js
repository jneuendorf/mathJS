// Generated by CoffeeScript 1.8.0

/**
* @class Set
* @constructor
* @param {Object} boundarySettings
* @param {Function} condition
* Optional. If given, the created Set will bounded by that condition
* @param {Array} elems
* Optional. This parameter serves as elements for the new Set. They will be in the new Set immediately.
* It is an array of comparable elements (that means if `mathJS.isComparable() === true`); non-comparables will be ignored.
*
 */

(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  mathJS.Set = (function(_super) {
    __extends(Set, _super);

    Set._isSet = function(set) {
      return set instanceof mathJS.Set || set["instanceof"](mathJS.Set);
    };

    function Set(boundarySettings, condition, elems) {
      var elem, _i, _len;
      if (elems == null) {
        elems = [];
      }
      if (arguments.length === 0) {
        return;
      }
      if (boundarySettings == null) {
        boundarySettings = {
          leftBoundary: null,
          rightBoundary: null
        };
      }
      this.leftBoundary = boundarySettings.leftBoundary;
      this.rightBoundary = boundarySettings.rightBoundary;
      if (condition instanceof Function) {
        this.condition = condition;
      } else {
        this.condition = null;
      }
      this._discreteSet = new mathJS.DiscreteSet();
      this._conditionalSet = new mathJS.ConditionalSet();
      for (_i = 0, _len = elems.length; _i < _len; _i++) {
        elem = elems[_i];
        if (mathJS.isComparable(elem)) {
          if (elem instanceof mathJS.DiscreteSet || (typeof elem["instanceof"] === "function" ? elem["instanceof"](mathJS.DiscreteSet) : void 0)) {
            this._discreteSet = this._discreteSet.union(elem);
          } else if (elem instanceof mathJS.ConditionalSet || (typeof elem["instanceof"] === "function" ? elem["instanceof"](mathJS.ConditionalSet) : void 0)) {
            this._conditionalSet = this._conditionalSet.union(elem);
          } else {
            this._discreteSet = this._discreteSet.union(new mathJS.DiscreteSet([elem]));
          }
        }
      }
      Object.defineProperties(this, {
        _universe: {
          value: null,
          enumerable: false,
          writable: true
        },
        universe: {
          get: function() {
            return this._universe;
          },
          set: function(universe) {
            if (universe instanceof mathJS.Set || universe === null) {
              this._universe = universe;
            }
            return this;
          },
          enumerable: true
        },
        size: {
          value: this._discreteSet.size + this._conditionalSet.size,
          enumerable: true,
          writable: false,
          configurable: true
        }
      });
    }

    Set.prototype.clone = function() {
      throw new Error("todo!");
    };

    Set.prototype.equals = function(set) {
      throw new Error("todo!");
    };

    Set.prototype.isSubsetOf = function(set) {
      throw new Error("todo!");
    };

    Set.prototype.isSupersetOf = function(set) {
      throw new Error("todo!");
    };

    Set.prototype.forAll = function() {};

    Set.prototype.exists = function() {};

    Set.prototype.contains = function(elem) {
      var subset, _i, _len, _ref;
      if (elem instanceof this.type) {
        _ref = this.subsets;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          subset = _ref[_i];
          if (subset.contains(elem)) {
            return true;
          }
        }
      }
      return false;
    };

    Set.prototype.has = Set.prototype.contains;

    Set.prototype.union = function(set) {
      return this;
    };

    Set.prototype.intersect = function(set) {};

    Set.prototype.intersects = function(set) {
      return this.intersection.size() > 0;
    };

    Set.prototype.disjoint = function(set) {
      return this.intersection.size() === 0;
    };

    Set.prototype.complement = function() {
      if (this.universe != null) {
        return asdf;
      }
      return new mathJS.EmptySet();
    };


    /**
    * a.without b => returns: removed all common elements from a
    *
     */

    Set.prototype.without = function(set) {};

    Set.prototype.cartesianProduct = function(set) {};

    Set.prototype.times = Set.prototype.cartesianProduct;

    Set.prototype.isEmpty = function() {
      return this.size === 0;
    };

    return Set;

  })(mixOf(mathJS.Poolable, mathJS.Comparable, mathJS.Parseable));

}).call(this);

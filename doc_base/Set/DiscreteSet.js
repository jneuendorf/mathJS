// Generated by CoffeeScript 1.8.0

/**
* This class is a Setof explicitely listed elements (with no needed logic).
* @class DiscreteSet
* @constructor
* @param {Function|Class} type
* @param {Set} universe
* Optional. If given, the created Set will be interpreted as a sub set of the universe.
* @param {mixed} elems...
* Optional. This and the following parameters serve as elements for the new Set. They will be in the new Set immediately.
* @extends Set
*
 */

(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  mathJS.DiscreteSet = (function(_super) {
    __extends(DiscreteSet, _super);

    function DiscreteSet(elems) {
      var elem, _i, _len;
      if (elems == null) {
        elems = [];
      }
      this.leftBoundary = null;
      this.rightBoundary = null;
      this.condition = null;
      this.elems = [];
      for (_i = 0, _len = elems.length; _i < _len; _i++) {
        elem = elems[_i];
        if (mathJS.isComparable(elem) && !this.contains(elem)) {
          this.elems.push(elem);
        }
      }
      Object.defineProperties(this, {
        elems: {
          value: this.elems,
          enumerable: false
        },
        _universe: {
          value: null,
          enumerable: false,
          writable: true
        },
        universe: {
          get: function() {
            return this._universe;
          },
          set: function(universe) {
            if (universe instanceof mathJS.Set || universe === null) {
              this._universe = universe;
            }
            return this;
          },
          enumerable: true
        },
        size: {
          value: this.elems.length,
          enumerable: false,
          writable: false,
          configurable: true
        }
      });
    }

    DiscreteSet.prototype.isSubsetOf = function(set) {
      var e, _i, _len, _ref;
      _ref = this.elems;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        e = _ref[_i];
        if (!set.contains(e)) {
          return false;
        }
      }
      return true;
    };

    DiscreteSet.prototype.isSupersetOf = function(set) {
      return set.isSubsetOf(this);
    };

    DiscreteSet.prototype.clone = function() {
      return new mathJS.DiscreteSet(this.elems);
    };


    /**
    * @Override
    *
     */

    DiscreteSet.prototype.equals = function(set) {
      return this.isSubsetOf(set) && set.isSubsetOf(this);
    };

    DiscreteSet.prototype.contains = function(elem) {
      var e, _i, _len, _ref;
      if (mathJS.isComparable(elem)) {
        _ref = this.elems;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          e = _ref[_i];
          if (e === elem || (typeof e.equals === "function" ? e.equals(elem) : void 0)) {
            return true;
          }
        }
      }
      return false;
    };

    DiscreteSet.prototype.union = function(set) {
      if (set instanceof mathJS.DiscreteSet) {
        return new mathJS.DiscreteSet(this.elems.concat(set.elems));
      } else if (set instanceof mathJS.ConditionalSet) {
        return "asdf";
      }
    };

    DiscreteSet.prototype.intersect = function(set) {
      var elems, res, x, y, _i, _j, _len, _len1, _ref, _ref1;
      if (set instanceof mathJS.DiscreteSet) {
        elems = [];
        _ref = this.elems;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          x = _ref[_i];
          _ref1 = set.elems;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            y = _ref1[_j];
            if (x.equals(y)) {
              elems.push(x);
            }
          }
        }
        if (elems.length > 0) {
          res = new mathJS.DiscreteSet(this.type, this.universe);
        }
      } else if (set instanceof mathJS.ConditionalSet) {

      } else if (set instanceof mathJS.EmptySet) {
        return new mathJS.EmptySet();
      }
      return null;
    };

    DiscreteSet.prototype.complement = function() {
      if (this.universe != null) {
        return;
      }
      return new mathJS.EmptySet();
    };


    /**
    * a.without b => returns: removed all common elements from a
    *
     */

    DiscreteSet.prototype.without = function(set) {};

    return DiscreteSet;

  })(mathJS.Set);

}).call(this);

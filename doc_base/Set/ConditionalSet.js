// Generated by CoffeeScript 1.8.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  mathJS.ConditionalSet = (function(_super) {
    __extends(ConditionalSet, _super);

    function ConditionalSet(condition, universe) {
      if (universe == null) {
        universe = null;
      }
      if (condition instanceof mathJS.SetSpec) {
        this.condition = condition;
      } else {
        this.condition = null;
      }
      this.leftBoundary = null;
      this.rightBoundary = null;
      Object.defineProperties(this, {
        _universe: {
          value: universe,
          enumerable: false,
          writable: true
        },
        universe: {
          get: function() {
            return this._universe;
          },
          set: function(universe) {
            if (universe instanceof mathJS.Set || universe === null) {
              this._universe = universe;
            }
            return this;
          },
          enumerable: true
        },
        size: {
          value: this.elems.length,
          enumerable: false,
          writable: false,
          configurable: true
        }
      });
    }

    ConditionalSet.prototype.clone = function() {
      throw new Error("todo!");
    };

    ConditionalSet.prototype.equals = function(set) {
      throw new Error("todo!");
    };

    ConditionalSet.prototype.isSubsetOf = function(set) {
      throw new Error("todo!");
    };

    ConditionalSet.prototype.isSupersetOf = function(set) {
      throw new Error("todo!");
    };

    ConditionalSet.prototype.forAll = function() {};

    ConditionalSet.prototype.exists = function() {};

    ConditionalSet.prototype.contains = function(elem) {
      var _ref;
      if (mathJS.isComparable(elem)) {
        if (((_ref = this.condition) != null ? _ref.check(elem) : void 0) === true) {
          return true;
        }
      }
      return false;
    };

    ConditionalSet.prototype.union = function(set) {
      return this;
    };

    ConditionalSet.prototype.intersect = function(set) {};

    ConditionalSet.prototype.intersects = function(set) {
      return this.intersection.size() > 0;
    };

    ConditionalSet.prototype.disjoint = function(set) {
      return this.intersection.size() === 0;
    };

    ConditionalSet.prototype.complement = function() {
      if (this.universe != null) {
        return asdf;
      }
      return new mathJS.EmptySet();
    };


    /**
    * a.without b => returns: removed all common elements from a
    *
     */

    ConditionalSet.prototype.without = function(set) {};

    ConditionalSet.prototype.cartesianProduct = function(set) {};

    ConditionalSet.prototype.times = ConditionalSet.prototype.cartesianProduct;

    ConditionalSet.prototype.isEmpty = function() {
      return this.size > 0;
    };

    ConditionalSet.prototype.cardinality = ConditionalSet.prototype.size;

    return ConditionalSet;

  })(mathJS.Set);

}).call(this);

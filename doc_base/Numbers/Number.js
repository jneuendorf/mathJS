// Generated by CoffeeScript 1.9.3

/**
 * @abstract
 * @class Number
 * @constructor
 * @param {Number} value
 * @extends Object
*
 */

(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  mathJS.Number = (function(superClass) {
    extend(Number, superClass);

    Number._getPrimitive = function(param, skipCheck) {
      if (skipCheck === true) {
        return param;
      }
      if (param instanceof mathJS.Number) {
        return param.value;
      }
      if (param instanceof Number) {
        return param.valueOf();
      }
      if (mathJS.isNum(param)) {
        return param;
      }
      return null;
    };

    Number.getSet = function() {
      return mathJS.Domains.R;
    };

    function Number(value) {
      var val;
      this._value = null;
      Object.defineProperties(this, {
        value: {
          get: this._getValue,
          set: this._setValue
        }
      });
      if ((val = this._getPrimitive(value)) != null) {
        this._value = val;
      } else {
        throw new mathJS.Errors.InvalidParametersError("Can't instatiate number from given '" + value + "'", "Number.coffee", void 0, value);
      }
    }

    Number.prototype["eval"] = function(values) {
      return this;
    };

    Number.prototype._getSet = function() {
      return new mathJS.Set(this);
    };

    Number.prototype["in"] = function(set) {
      return set.contains(this);
    };

    Number.prototype.valueOf = Number.prototype._getValue;

    return Number;

  })(_mathJS.AbstractNumber);

}).call(this);

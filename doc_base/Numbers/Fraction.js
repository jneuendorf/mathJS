// Generated by CoffeeScript 1.9.3
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  mathJS.Fraction = (function(superClass) {
    extend(Fraction, superClass);


    /**
    * @Override mathJS.Number
    * @static
    * @method _fromPool
    *
     */

    Fraction._fromPool = function(e, d) {
      var frac;
      if (this._pool.length > 0) {
        if (this.valueIsValid(val)) {
          frac = this._pool.pop();
          frac.enumerator = e.value || e;
          frac.denominator = d.value || d;
          return frac;
        }
        return null;
      } else {
        return new this(e, d);
      }
    };


    /**
    * @Override mathJS.Number
    * @static
    * @method parse
    *
     */

    Fraction.parse = function(str) {
      var parts;
      if (indexOf.call(str, "/") >= 0) {
        parts = str.split("/");
      } else if (indexOf.call(str, ":") >= 0) {
        parts = str.slit(":");
      }
      return this["new"](parts.first, parts.second);
    };


    /**
    * @Override mathJS.Number
    * @static
    * @method getSet
    *
     */

    Fraction.getSet = function() {
      return mathJS.Domains.Q;
    };


    /**
    * @Override mathJS.Number
    * @static
    * @method new
    *
     */

    Fraction["new"] = function(e, d) {
      return this._fromPool(e, d);
    };

    function Fraction(enumerator, denominator) {
      if (enumerator instanceof mathJS.Number && denominator instanceof mathJS.Number) {
        this.enumerator = enumerator.toInt();
        this.denominator = denominator.toInt();
      } else {
        this.enumerator = ~~enumerator;
        this.denominator = ~~denominator;
      }
    }

    return Fraction;

  })(mathJS.Number);

}).call(this);

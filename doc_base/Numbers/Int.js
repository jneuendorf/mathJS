// Generated by CoffeeScript 1.8.0

/**
 * @class Int
 * @constructor
 * @param {Number} value
 * @extends Number
*
 */

(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

  mathJS.Int = (function(_super) {
    __extends(Int, _super);

    (function() {
      var inherited;
      inherited = Int._getValueFromParam.bind(Int);
      return Int._getValueFromParam = function(value) {
        return ~~inherited(value);
      };
    })();

    Int.parse = function(str) {
      var parsed;
      if (mathJS.isNum(parsed = parseIn(str, 10))) {
        return this.fromPool(parsed);
      }
      return parsed;
    };

    Int.random = function(max, min) {
      return this.fromPool(mathJS.randInt(max, min));
    };

    function Int(value) {
      Int.__super__.constructor.apply(this, arguments);
    }

    Int.prototype.isEven = function() {
      return __modulo(this.value, 2) === 0;
    };

    Int.prototype.isOdd = function() {
      return __modulo(this.value, 2) === 1;
    };

    Int.prototype.plus = function(n) {
      return this.constructor.fromPool(~~(this.value + this._getValueFromParam(n)));
    };

    Int.prototype.increase = function(n) {
      this.value += ~~this._getValueFromParam(n);
      return this;
    };

    Int.prototype.plusSelf = Int.increase;

    Int.prototype.minus = function(n) {
      return this.constructor.fromPool(~~(this.value - n));
    };

    Int.prototype.decrease = function(n) {
      this.value = ~~(this.value - this._getValueFromParam(n));
      return this;
    };

    Int.prototype.minusSelf = Int.decrease;

    Int.prototype.times = function(n) {
      return this.constructor.fromPool(~~(this.value * this._getValueFromParam(n)));
    };

    Int.prototype.timesSelf = function(n) {
      this.value = ~~(this.value * this._getValueFromParam(n));
      return this;
    };

    Int.prototype.divide = function(n) {
      return this.constructor.fromPool(~~(this.value / this._getValueFromParam(n)));
    };

    Int.prototype.divideSelf = function(n) {
      this.value = ~~(this.value / this._getValueFromParam(n));
      return this;
    };

    Int.prototype.sqrt = function() {
      return this.constructor.fromPool(~~(mathJS.sqrt(this.value)));
    };

    Int.prototype.sqrtSelf = function() {
      this.value = ~~mathJS.sqrt(this.value);
      return this;
    };

    Int.prototype.pow = function(n) {
      return this.constructor.fromPool(mathJS.pow(this.value, this._getValueFromParam(n)));
    };

    Int.prototype.powSelf = function(n) {
      this.value = mathJS.pow(this.value, this._getValueFromParam(n));
      return this;
    };

    Int.prototype.toInt = function() {
      return mathJS.Int.fromPool(this.value);
    };

    return Int;

  })(mathJS.Number);

}).call(this);

// Generated by CoffeeScript 1.9.3

/**
 * @class Int
 * @constructor
 * @param {Number} value
 * @extends Number
*
 */

(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

  mathJS.Int = (function(superClass) {
    extend(Int, superClass);

    Int.parse = function(str) {
      var parsed;
      if (mathJS.isNum(parsed = parseInt(str, 10))) {
        return this._fromPool(parsed);
      }
      return parsed;
    };

    Int.random = function(max, min) {
      return this._fromPool(mathJS.randInt(max, min));
    };

    Int.getSet = function() {
      return mathJS.Domains.N;
    };


    /**
    * @Override mathJS.Poolable
    * @static
    * @method _fromPool
    *
     */

    Int._fromPool = function(value) {
      var number, val;
      if (this._pool.length > 0) {
        if ((val = this._getPrimitiveInt(value)) != null) {
          number = this._pool.pop();
          number.value = val.value || val;
          return number;
        }
        throw new mathJS.Errors.InvalidParametersError("Can't instatiate number from given '" + value + "'", "Int.coffee", void 0, value);
      }
      return new this(value);
    };

    Int._getPrimitiveInt = function(param, skipCheck) {
      if (skipCheck === true) {
        return param;
      }
      if (param instanceof mathJS.Int) {
        return param.value;
      }
      if (param instanceof mathJS.Number) {
        return ~~param.value;
      }
      if (param instanceof Number) {
        return ~~param.valueOf();
      }
      if (mathJS.isNum(param)) {
        return ~~param;
      }
      return null;
    };

    function Int(value) {
      Int.__super__.constructor.apply(this, arguments);
    }

    Int.prototype.isEven = function() {
      return modulo(this.value, 2) === 0;
    };

    Int.prototype.isOdd = function() {
      return modulo(this.value, 2) === 1;
    };

    Int.prototype.toInt = function() {
      return mathJS.Int._fromPool(this.value);
    };

    Int.prototype.getSet = function() {
      return mathJS.Domains.N;
    };

    return Int;

  })(mathJS.Number);

}).call(this);

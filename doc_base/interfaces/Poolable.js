// Generated by CoffeeScript 1.9.3
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  _mathJS.Poolable = (function(superClass) {
    extend(Poolable, superClass);

    function Poolable() {
      return Poolable.__super__.constructor.apply(this, arguments);
    }

    Poolable._pool = [];

    Poolable._fromPool = function() {
      throw new mathJS.Errors.NotImplementedError("static _fromPool in " + this.name);
    };


    /**
    * Releases the instance to the pool of its class.
    * @method release
    * @return This intance
    * @chainable
    *
     */

    Poolable.prototype.release = function() {
      if (this.constructor._pool.length < mathJS.settings.maxPoolSize) {
        this.constructor._pool.push(this);
      }
      if (DEBUG) {
        if (this.constructor._pool.length >= mathJS.settings.maxPoolSize) {
          console.warn(this.constructor.name + "-pool is full:", this.constructor._pool);
        }
      }
      return this;
    };

    return Poolable;

  })(_mathJS.Interface);

}).call(this);

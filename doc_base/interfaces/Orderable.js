// Generated by CoffeeScript 1.9.3
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  _mathJS.Orderable = (function(superClass) {
    extend(Orderable, superClass);

    function Orderable() {
      return Orderable.__super__.constructor.apply(this, arguments);
    }


    /**
    * This method checks for mathmatical "<". This means new mathJS.Double(4.2).lessThan(5.2) is true.
    * @method lessThan
    * @param {Number} n
    * @return {Boolean}
    *
     */

    Orderable.prototype.lessThan = function(n) {
      throw new mathJS.Errors.NotImplementedError("lessThan in " + this.contructor.name);
    };


    /**
    * Alias for `lessThan`.
    * @method lt
    *
     */

    Orderable.prototype.lt = function() {
      return this.lessThan.apply(this, arguments);
    };


    /**
    * This method checks for mathmatical ">". This means new mathJS.Double(4.2).greaterThan(3.2) is true.
    * @method greaterThan
    * @param {Number} n
    * @return {Boolean}
    *
     */

    Orderable.prototype.greaterThan = function(n) {
      throw new mathJS.Errors.NotImplementedError("greaterThan in " + this.contructor.name);
    };


    /**
    * Alias for `greaterThan`.
    * @method gt
    *
     */

    Orderable.prototype.gt = function() {
      return this.greaterThan.apply(this, arguments);
    };


    /**
    * This method checks for mathmatical "<=". This means new mathJS.Double(4.2).lessThanOrEqualTo(5.2) is true.
    * @method lessThanOrEqualTo
    * @param {Number} n
    * @return {Boolean}
    *
     */

    Orderable.prototype.lessThanOrEqualTo = function(n) {
      throw new mathJS.Errors.NotImplementedError("lessThanOrEqualTo in " + this.contructor.name);
    };


    /**
    * Alias for `lessThanOrEqualTo`.
    * @method lte
    *
     */

    Orderable.prototype.lte = function() {
      return this.lessThanOrEqualTo.apply(this, arguments);
    };


    /**
    * This method checks for mathmatical ">=". This means new mathJS.Double(4.2).greaterThanOrEqualTo(3.2) is true.
    * @method greaterThanOrEqualTo
    * @param {Number} n
    * @return {Boolean}
    *
     */

    Orderable.prototype.greaterThanOrEqualTo = function(n) {
      throw new mathJS.Errors.NotImplementedError("greaterThanOrEqualTo in " + this.contructor.name);
    };


    /**
    * Alias for `greaterThanOrEqualTo`.
    * @method gte
    *
     */

    Orderable.prototype.gte = function() {
      return this.greaterThanOrEqualTo.apply(this, arguments);
    };

    return Orderable;

  })(_mathJS.Comparable);

}).call(this);

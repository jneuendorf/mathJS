// Generated by CoffeeScript 1.8.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  mathJS.Orderable = (function(_super) {
    __extends(Orderable, _super);

    function Orderable() {
      return Orderable.__super__.constructor.apply(this, arguments);
    }


    /**
    * This method checks for mathmatical '<'. This means new mathJS.Double(4.2).lessThan(5.2) is true.
    * @method lessThan
    * @param {Number} n
    * @return {Boolean}
    *
     */

    Orderable.prototype.lessThan = function(n) {
      throw new Error("To be implemented!");
    };


    /**
    * Alias for `lessThan`.
    * @method lt
    *
     */

    Orderable.prototype.lt = Orderable.prototype.lessThan;


    /**
    * This method checks for mathmatical '>'. This means new mathJS.Double(4.2).greaterThan(3.2) is true.
    * @method greaterThan
    * @param {Number} n
    * @return {Boolean}
    *
     */

    Orderable.prototype.greaterThan = function(n) {
      throw new Error("To be implemented!");
    };


    /**
    * Alias for `greaterThan`.
    * @method lt
    *
     */

    Orderable.prototype.gt = Orderable.prototype.greaterThan;


    /**
    * This method checks for mathmatical '<='. This means new mathJS.Double(4.2).lessThanOrEqualTo(5.2) is true.
    * @method lessThanOrEqualTo
    * @param {Number} n
    * @return {Boolean}
    *
     */

    Orderable.prototype.lessThanOrEqualTo = function(n) {
      throw new Error("To be implemented!");
    };


    /**
    * Alias for `lessThanOrEqualTo`.
    * @method lt
    *
     */

    Orderable.prototype.lte = Orderable.prototype.lessThanOrEqualTo;


    /**
    * This method checks for mathmatical '>='. This means new mathJS.Double(4.2).greaterThanOrEqualTo(3.2) is true.
    * @method greaterThanOrEqualTo
    * @param {Number} n
    * @return {Boolean}
    *
     */

    Orderable.prototype.greaterThanOrEqualTo = function(n) {
      throw new Error("To be implemented!");
    };


    /**
    * Alias for `greaterThanOrEqualTo`.
    * @method lt
    *
     */

    Orderable.prototype.gte = Orderable.prototype.greaterThanOrEqualTo;

    return Orderable;

  })(mathJS.Comparable);

}).call(this);

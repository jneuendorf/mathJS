// Generated by CoffeeScript 1.8.0

/**
 * This is a class (not actually but logically) that contains all definitions of constants.
 * Those constants can be con- or disjoined (see functions 'and' and 'or') but already con- or disjoined can't be con- or disjoined any further (so nesting is not supported).
 * @class CONSTANTS
*
 */

(function() {
  var __slice = [].slice;

  window.CONSTANTS = {
    and: function() {
      var res, val, vals, _i, _len;
      vals = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      res = 0;
      for (_i = 0, _len = vals.length; _i < _len; _i++) {
        val = vals[_i];
        res += val;
      }
      return res;
    },
    or: function() {
      var res, val, vals, _i, _len;
      vals = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      res = 1;
      for (_i = 0, _len = vals.length; _i < _len; _i++) {
        val = vals[_i];
        res += val;
      }
      return res;
    },

    /**
    	 * This method gets the keys of a constant's object from a given value.
    	 * @static
    	 * @method get
    	 * @param {Object} obj
    	 * @param {Integer} val
    	 * @return {Array} An array containing all keys of the according CONSTANTS object that are encoded in 'val'. The first index indicates if the keys are con- or disjoined (true means 'or', false means 'and')
    	*
     */
    get: function(obj, val) {
      var idx, k, key, keys, n, res, temp, _i, _len;
      keys = (function() {
        var _i, _len, _ref, _results;
        _ref = Object.keys(obj);
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          key = _ref[_i];
          if (key !== "DEFAULT") {
            _results.push(key);
          }
        }
        return _results;
      })();
      n = val;
      idx = 1;
      res = [val % 2 === 1];
      n = n >> 1;
      while (n > 0) {
        temp = Math.pow(2, idx);
        if (n % 2 === 1) {
          for (_i = 0, _len = keys.length; _i < _len; _i++) {
            key = keys[_i];
            if (!(obj[key] === temp)) {
              continue;
            }
            res.push(key);
            keys = (function() {
              var _j, _len1, _results;
              _results = [];
              for (_j = 0, _len1 = keys.length; _j < _len1; _j++) {
                k = keys[_j];
                if (k !== key) {
                  _results.push(k);
                }
              }
              return _results;
            })();
          }
        }
        n = n >> 1;
        idx++;
      }
      return res;
    },

    /**
    	 * This method adds a new (!!) key to a given constant's object dynamically. If the key already exists an error is thrown.
    	 * @static
    	 * @method add
    	 * @param {Object} obj
    	 * @param {Integer} val
    	 * @return {Array} An array containing all keys of the according CONSTANTS object that are encoded in 'val'. The first index indicates if the keys are con- or disjoined (true means 'or', false means 'and')
    	*
     */
    add: function(obj, key) {
      var k, maxVal, v;
      maxVal = 0;
      for (k in obj) {
        v = obj[k];
        if (v > maxVal) {
          maxVal = v;
        }
        if (k === key) {
          console.warn("Key '" + key + "' already exists in", obj);
          throw new Error("Key already exists!");
        }
      }
      obj[key] = maxVal * 2;
      return this;
    }
  };

}).call(this);

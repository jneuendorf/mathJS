// Generated by CoffeeScript 1.8.0
(function() {
  mathJS.Integral = (function() {
    var CLASS, _solvePrepareVars;

    CLASS = Integral;

    Integral.test = function() {
      var i, start, start2;
      i = new mathJS.Integral(function(x) {
        return -2 * x * x - 3 * x + 10;
      }, -3, 1);
      start = Date.now();
      console.log(i.solve(false, 0.00000000000001), Date.now() - start);
      start = Date.now();
      i.solveAsync(function(res) {
        return console.log(res, "async took:", Date.now() - start);
      }, false, 0.0000001);
      start2 = Date.now();
      console.log(i.solve(), Date.now() - start2);
      return "test done";
    };

    function Integral(integrand, leftBoundary, rightBoundary, integrationVariable) {
      if (leftBoundary == null) {
        leftBoundary = -Infinity;
      }
      if (rightBoundary == null) {
        rightBoundary = Infinity;
      }
      if (integrationVariable == null) {
        integrationVariable = new mathJS.Variable("x");
      }
      this.integrand = integrand;
      this.leftBoundary = leftBoundary;
      this.rightBoundary = rightBoundary;
      this.integrationVariable = integrationVariable;
      this.settings = null;
    }

    _solvePrepareVars = function(from, to, abs, stepSize) {
      var diff, modVal, tmp;
      if (abs === false) {
        modVal = mathJS.id;
      } else {
        modVal = function(x) {
          return Math.abs(x);
        };
      }
      from = from.value || from;
      to = to.value || to;
      if (to < from) {
        tmp = to;
        to = from;
        from = tmp;
      }
      if ((diff = to - from) < stepSize) {
        stepSize = diff * 0.001;
      }
      return {
        modVal: modVal,
        from: from,
        to: to,
        stepSize: stepSize
      };
    };

    Integral.solve = function(integrand, from, to, abs, stepSize, settings) {
      var halfStepSize, i, modVal, res, steps, vars, x2, y1, y2, _i, _ref;
      if (abs == null) {
        abs = false;
      }
      if (stepSize == null) {
        stepSize = 0.01;
      }
      if (settings == null) {
        settings = {};
      }
      vars = _solvePrepareVars(from, to, abs, stepSize);
      modVal = vars.modVal;
      from = vars.from;
      to = vars.to;
      stepSize = vars.stepSize;
      if ((steps = (to - from) / stepSize) > settings.maxSteps || mathJS.settings.integral.maxSteps) {
        throw new mathJS.CalculationExceedanceError("Too many calculations (" + (steps.toExponential()) + ") ahead! Either adjust mathJS.Integral.settings.maxSteps, set the Integral's instance's settings or pass settings to mathJS.Integral.solve() if you really need that many calculations.");
      }
      res = 0;
      halfStepSize = 0.5 * stepSize;
      y1 = integrand(from);
      if (DEBUG) {
        i = 0;
      }
      for (x2 = _i = _ref = from + stepSize; stepSize > 0 ? _i <= to : _i >= to; x2 = _i += stepSize) {
        if (DEBUG) {
          i++;
        }
        y2 = integrand(x2);
        if (mathJS.sign(y1) === mathJS.sign(y2)) {
          res += modVal((y1 + y2) * halfStepSize);
        }
        y1 = y2;
      }
      if (DEBUG) {
        console.log("made", i, "calculations");
      }
      return res;
    };


    /**
    * For better calculation performance of the integral decrease delay and numBlocks.
    * For better overall performance increase them.
    * @public
    * @static
    * @method solveAsync
    * @param integrand {Function}
    * @param from {Number}
    * @param to {Number}
    * @param callback {Function}
    * @param abs {Boolean}
    * Optional. Indicates whether areas below the graph are negative or not.
    * Default is false.
    * @param stepSize {Number}
    * Optional. Defines the width of each trapezoid. Default is 0.01.
    * @param delay {Number}
    * Optional. Defines the time to pass between blocks of calculations.
    * Default is 2ms.
    * @param numBlocks {Number}
    * Optional. Defines the number of calculation blocks.
    * Default is 100.
    *
     */

    Integral.solveAsync = function(integrand, from, to, callback, abs, stepSize, delay, numBlocks) {
      var block, blockSize, f, res;
      if (delay == null) {
        delay = 2;
      }
      if (numBlocks == null) {
        numBlocks = 100;
      }
      if (callback == null) {
        return false;
      }
      blockSize = (to - from) / numBlocks;
      block = 0;
      res = 0;
      f = function(from, to) {
        if (block++ === numBlocks) {
          return callback(res);
        }
        res += CLASS.solve(integrand, from, to, abs, stepSize);
        setTimeout(function() {
          return f(to, to + blockSize);
        }, delay);
        return true;
      };
      f(from, from + blockSize);
      return this;
    };

    Integral.prototype.solve = function(abs, stepSize) {
      return CLASS.solve(this.integrand, this.leftBoundary, this.rightBoundary, abs, stepSize);
    };

    Integral.prototype.solveAsync = function(callback, abs, stepSize) {
      return CLASS.solveAsync(this.integrand, this.leftBoundary, this.rightBoundary, callback, abs, stepSize);
    };

    return Integral;

  })();

}).call(this);

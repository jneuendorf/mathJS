// Generated by CoffeeScript 1.9.3

/**
* This is the super class of all mathJS classes.
* Therefore all cross-class things are defined here.
* @class Object
*
 */

(function() {
  var slice = [].slice,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  _mathJS.Object = (function() {
    function Object() {}

    Object._implements = [];

    Object._implementedBy = [];

    Object["implements"] = function() {
      var classes, clss, clssPrototype, i, len, method, name, prototypeKeys;
      classes = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      if (classes.first instanceof Array) {
        classes = classes.first;
      }
      for (i = 0, len = classes.length; i < len; i++) {
        clss = classes[i];
        if (indexOf.call(clss._implementedBy, this) < 0) {
          clss._implementedBy.push(this);
        }
        clssPrototype = clss.prototype;
        prototypeKeys = window.Object.keys(clssPrototype);
        for (name in clss) {
          method = clss[name];
          if (indexOf.call(prototypeKeys, name) < 0) {
            this[name] = method;
          }
        }
        for (name in clssPrototype) {
          method = clssPrototype[name];
          this.prototype[name] = method;
        }
        this._implements.push(clss);
      }
      return this;
    };

    Object.prototype.isA = function(clss) {
      var c, i, len, ref;
      if ((clss == null) || !(clss instanceof Function)) {
        return false;
      }
      if (this instanceof clss) {
        return true;
      }
      ref = this.constructor._implements;
      for (i = 0, len = ref.length; i < len; i++) {
        c = ref[i];
        if (c === clss) {
          return true;
        }
        while ((c = c.__superClass__) != null) {
          if (c === clss) {
            return true;
          }
        }
      }
      return false;
    };

    Object.prototype["instanceof"] = function() {
      return this.isA.apply(this, arguments);
    };

    return Object;

  })();

}).call(this);

// Generated by CoffeeScript 1.9.3
(function() {
  var indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Array.prototype.reverseCopy = function() {
    var item, j, res;
    res = [];
    for (j = this.length - 1; j >= 0; j += -1) {
      item = this[j];
      res.push(item);
    }
    return res;
  };

  Array.prototype.unique = function() {
    var elem, j, len1, res;
    res = [];
    for (j = 0, len1 = this.length; j < len1; j++) {
      elem = this[j];
      if (indexOf.call(res, elem) < 0) {
        res.push(elem);
      }
    }
    return res;
  };

  Array.prototype.sample = function(n, forceArray) {
    var arr, elem, i, res;
    if (n == null) {
      n = 1;
    }
    if (forceArray == null) {
      forceArray = false;
    }
    if (n === 1) {
      if (!forceArray) {
        return this[Math.floor(Math.random() * this.length)];
      }
      return [this[Math.floor(Math.random() * this.length)]];
    }
    if (n > this.length) {
      n = this.length;
    }
    i = 0;
    res = [];
    arr = this.clone();
    while (i++ < n) {
      elem = arr.sample(1);
      res.push(elem);
      arr.remove(elem);
    }
    return res;
  };

  Array.prototype.shuffle = function() {
    var arr, elem, i, j, len1;
    arr = this.sample(this.length);
    for (i = j = 0, len1 = arr.length; j < len1; i = ++j) {
      elem = arr[i];
      this[i] = elem;
    }
    return this;
  };

  Array.prototype.average = function() {
    var elem, elems, j, len1, sum;
    sum = 0;
    elems = 0;
    for (j = 0, len1 = this.length; j < len1; j++) {
      elem = this[j];
      if (!(Math.isNum(elem))) {
        continue;
      }
      sum += elem;
      elems++;
    }
    return sum / elems;
  };

  Array.prototype.median = Array.prototype.average;

  Array.prototype.clone = Array.prototype.slice;

  Array.prototype.indexOfNative = Array.prototype.indexOf;

  Array.prototype.indexOf = function(elem, fromIdx) {
    var idx, len;
    idx = fromIdx != null ? fromIdx : 0;
    len = this.length;
    while (idx < len) {
      if (this[idx] === elem) {
        return idx;
      }
      idx++;
    }
    return -1;
  };

  Array.prototype.remove = function(elem) {
    var idx;
    idx = this.indexOf(elem);
    if (idx > -1) {
      this.splice(idx, 1);
    }
    return this;
  };

  Array.prototype.removeAll = function(elements) {
    var elem, j, len1;
    if (elements == null) {
      elements = [];
    }
    for (j = 0, len1 = elements.length; j < len1; j++) {
      elem = elements[j];
      this.remove(elem);
    }
    return this;
  };

  Array.prototype.removeAt = function(idx) {
    this.splice(idx, 1);
    return this;
  };

  Object.defineProperties(Array.prototype, {
    first: {
      get: function() {
        return this[0];
      },
      set: function(val) {
        this[0] = val;
        return this;
      }
    },
    second: {
      get: function() {
        return this[1];
      },
      set: function(val) {
        this[1] = val;
        return this;
      }
    },
    third: {
      get: function() {
        return this[2];
      },
      set: function(val) {
        this[2] = val;
        return this;
      }
    },
    fourth: {
      get: function() {
        return this[3];
      },
      set: function(val) {
        this[3] = val;
        return this;
      }
    },
    last: {
      get: function() {
        return this[this.length - 1];
      },
      set: function(val) {
        this[this.length - 1] = val;
        return this;
      }
    }
  });


  /**
   * @method getMax
   * @param {Function} propertyGetter
   * The passed callback extracts the value being compared from the array elements.
   * @return {Array} An array of all maxima.
  *
   */

  Array.prototype.getMax = function(propertyGetter) {
    var elem, j, len1, max, res, val;
    max = null;
    res = [];
    if (propertyGetter == null) {
      propertyGetter = function(item) {
        return item;
      };
    }
    for (j = 0, len1 = this.length; j < len1; j++) {
      elem = this[j];
      val = propertyGetter(elem);
      if (val > max || max === null) {
        max = val;
        res = [elem];
      } else if (val === max) {
        res.push(elem);
      }
    }
    return res;
  };

  Array.prototype.getMin = function(propertyGetter) {
    var elem, j, len1, min, res, val;
    min = null;
    res = [];
    if (propertyGetter == null) {
      propertyGetter = function(item) {
        return item;
      };
    }
    for (j = 0, len1 = this.length; j < len1; j++) {
      elem = this[j];
      val = propertyGetter(elem);
      if (val < min || min === null) {
        min = val;
        res = [elem];
      } else if (val === min) {
        res.push(elem);
      }
    }
    return res;
  };

  Array.prototype.sortProp = function(getProp, order) {
    var cmpFunc;
    if (order == null) {
      order = "asc";
    }
    if (getProp == null) {
      getProp = function(item) {
        return item;
      };
    }
    if (order === "asc") {
      cmpFunc = function(a, b) {
        a = getProp(a);
        b = getProp(b);
        if (a < b) {
          return -1;
        }
        if (b > a) {
          return 1;
        }
        return 0;
      };
    } else {
      cmpFunc = function(a, b) {
        a = getProp(a);
        b = getProp(b);
        if (a > b) {
          return -1;
        }
        if (b < a) {
          return 1;
        }
        return 0;
      };
    }
    return this.sort(cmpFunc);
  };

  String.prototype.camel = function(spaces) {
    var i, j, ref, str;
    if (spaces == null) {
      spaces = false;
    }
    str = this.toLowerCase();
    if (spaces) {
      str = str.split(" ");
      for (i = j = 1, ref = str.length; 1 <= ref ? j < ref : j > ref; i = 1 <= ref ? ++j : --j) {
        str[i] = str[i].charAt(0).toUpperCase() + str[i].substring(1);
      }
      str = str.join("");
    }
    return str;
  };

  String.prototype.antiCamel = function() {
    var i, j, ref, res, temp;
    res = this.charAt(0);
    for (i = j = 1, ref = this.length; 1 <= ref ? j < ref : j > ref; i = 1 <= ref ? ++j : --j) {
      temp = this.charAt(i);
      if (temp === temp.toUpperCase()) {
        res += " ";
      }
      res += temp;
    }
    return res;
  };

  String.prototype.firstToUpperCase = function() {
    return this.charAt(0).toUpperCase() + this.slice(1);
  };

  String.prototype.snakeToCamelCase = function() {
    var char, j, len1, prevChar, res;
    res = "";
    for (j = 0, len1 = this.length; j < len1; j++) {
      char = this[j];
      if (char !== "_") {
        if (prevChar !== "_") {
          res += char;
        } else {
          res += char.toUpperCase();
        }
      }
      prevChar = char;
    }
    return res;
  };

  String.prototype.camelToSnakeCase = function() {
    var char, j, len1, prevChar, res;
    res = "";
    prevChar = null;
    for (j = 0, len1 = this.length; j < len1; j++) {
      char = this[j];
      if (char === char.toLowerCase()) {
        res += char;
      } else {
        if (prevChar === prevChar.toLowerCase()) {
          res += "_" + char.toLowerCase();
        } else {
          res += char;
        }
      }
      prevChar = char;
    }
    return res;
  };

  String.prototype.lower = String.prototype.toLowerCase;

  String.prototype.upper = String.prototype.toUpperCase;

  Object.defineProperties(String.prototype, {
    first: {
      get: function() {
        return this[0];
      },
      set: function(val) {
        return this;
      }
    },
    second: {
      get: function() {
        return this[1];
      },
      set: function(val) {
        return this;
      }
    },
    third: {
      get: function() {
        return this[2];
      },
      set: function(val) {
        return this;
      }
    },
    fourth: {
      get: function() {
        return this[3];
      },
      set: function(val) {
        return this;
      }
    },
    last: {
      get: function() {
        return this[this.length - 1];
      },
      set: function(val) {
        return this;
      }
    }
  });

  String.prototype.equals = function(str) {
    return this.valueOf() === str.valueOf();
  };

  String.prototype.lessThan = function(str) {
    return this.valueOf() < str.valueOf();
  };

  String.prototype.lt = String.prototype.lessThan;

  String.prototype.greaterThan = function(str) {
    return this.valueOf() > str.valueOf();
  };

  String.prototype.gt = String.prototype.greaterThan;

  String.prototype.lessThanOrEqualTo = function(str) {
    return this.valueOf() <= str.valueOf();
  };

  String.prototype.lte = String.prototype.lessThanOrEqualTo;

  String.prototype.greaterThanOrEqualTo = function(str) {
    return this.valueOf() >= str.valueOf();
  };

  String.prototype.gte;

  Boolean.prototype.equals = function(bool) {
    return this.valueOf() === bool.valueOf();
  };

  Boolean.prototype.lessThan = function(bool) {
    return this.valueOf() < bool.valueOf();
  };

  Boolean.prototype.lt = Boolean.prototype.lessThan;

  Boolean.prototype.greaterThan = function(bool) {
    return this.valueOf() > bool.valueOf();
  };

  Boolean.prototype.gt = Boolean.prototype.greaterThan;

  Boolean.prototype.lessThanOrEqualTo = function(bool) {
    return this.valueOf() <= bool.valueOf();
  };

  Boolean.prototype.lte = Boolean.prototype.lessThanOrEqualTo;

  Boolean.prototype.greaterThanOrEqualTo = function(bool) {
    return this.valueOf() >= str.valueOf();
  };

  Boolean.prototype.gte;

  Object.keysLike = function(obj, pattern) {
    var j, key, len1, ref, res;
    res = [];
    ref = Object.keys(obj);
    for (j = 0, len1 = ref.length; j < len1; j++) {
      key = ref[j];
      if (pattern.test(key)) {
        res.push(key);
      }
    }
    return res;
  };

}).call(this);

// Generated by CoffeeScript 1.8.0

/**
* Tree structure of terms
* @class Term

*
 */

(function() {
  mathJS.Term = (function() {
    Term.prototype.fromString = function(str) {
      return new mathJS.Term();
    };

    function Term() {
      var arg, i, l, operations, terms, _i, _j, _len;
      l = arguments.length;
      if (l >= 3 && l % 2 === 1) {
        terms = [];
        for (_i = 0, _len = arguments.length; _i < _len; _i += 2) {
          arg = arguments[_i];
          terms.push(arg);
        }
        this.terms = terms;
        operations = [];
        for (i = _j = 1; 1 <= l ? _j < l : _j > l; i = 1 <= l ? ++_j : --_j) {
          if (i % 2 === 1) {
            operations.push(arguments[i]);
          }
        }
        this.operations = operations;
      } else if (l === 1) {
        this.terms = [arguments[0]];
      }
    }

    Term.prototype["eval"] = function(values) {
      var op, ops, precedence, res, term, term1, term2, _i, _j, _k, _l, _len, _len1, _len2, _ref, _ref1, _results;
      ops = this.operations.clone();
      for (precedence = _i = 1; _i < 20; precedence = ++_i) {
        _ref = this.operations;
        for (_j = 0, _len = _ref.length; _j < _len; _j++) {
          op = _ref[_j];
          if (op.precedence === precedence) {
            term1 = this.operations[idx];
            term2 = this.operations[idx + 1];
          }
        }
      }
      for (_k = 0, _len1 = ops.length; _k < _len1; _k++) {
        op = ops[_k];
        precedence = op.precedence;
      }
      ops.sortProp(function(op) {
        return op.precedence;
      });
      console.log(ops);
      res = null;
      _ref1 = this.terms;
      _results = [];
      for (_l = 0, _len2 = _ref1.length; _l < _len2; _l++) {
        term = _ref1[_l];
        _results.push(true);
      }
      return _results;
    };

    return Term;

  })();

}).call(this);

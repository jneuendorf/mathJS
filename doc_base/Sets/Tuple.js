// Generated by CoffeeScript 1.9.3
(function() {
  var slice = [].slice;

  mathJS.Tuple = (function() {
    function Tuple() {
      var elem, elems, j, len, temp;
      elems = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      if (elems.first instanceof Array) {
        elems = elems.first;
      }
      temp = [];
      for (j = 0, len = elems.length; j < len; j++) {
        elem = elems[j];
        if (!mathJS.isNum(elem)) {
          temp.push(elem);
        } else {
          temp.push(new mathJS.Number(elem));
        }
      }
      this.elems = temp;
      this._size = temp.length;
    }

    Object.defineProperties(Tuple.prototype, {
      first: {
        get: function() {
          return this.at(0);
        },
        set: function() {
          return this;
        }
      },
      length: {
        get: function() {
          return this._size;
        },
        set: function() {
          return this;
        }
      }
    });

    Tuple.prototype.add = function() {
      var elems;
      elems = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return new mathJS.Tuple(this.elems.concat(elems));
    };

    Tuple.prototype.at = function(idx) {
      return this.elems[idx];
    };

    Tuple.prototype.clone = function() {
      return new mathJS.Tuple(this.elems);
    };

    Tuple.prototype.contains = function(elem) {
      var e, j, len, ref;
      ref = this.elems;
      for (j = 0, len = ref.length; j < len; j++) {
        e = ref[j];
        if (e.equals(elem)) {
          return true;
        }
      }
      return false;
    };

    Tuple.prototype.equals = function(tuple) {
      var elem, elements, idx, j, len, ref;
      if (this._size !== tuple._size) {
        return false;
      }
      elements = tuple.elems;
      ref = this.elems;
      for (idx = j = 0, len = ref.length; j < len; idx = ++j) {
        elem = ref[idx];
        if (!elem.equals(elements[idx])) {
          return false;
        }
      }
      return true;
    };


    /**
    * Evaluates the tuple.
    * @param values {Array}
    * # TODO: also enables hash of vars
    * A value for each tuple element.
    *
     */

    Tuple.prototype["eval"] = function(values) {
      var elem, elems, i;
      elems = (function() {
        var j, len, ref, results;
        ref = this.elems;
        results = [];
        for (i = j = 0, len = ref.length; j < len; i = ++j) {
          elem = ref[i];
          results.push(elem["eval"](values[i]));
        }
        return results;
      }).call(this);
      return new mathJS.Tuple(elems);
    };


    /**
    * Get the elements of the Tuple.
    * @method getElements
    *
     */

    Tuple.prototype.getElements = function() {
      return this.elems.clone();
    };

    Tuple.prototype.insert = function() {
      var elem, elements, elems, i, idx, j, len, ref;
      idx = arguments[0], elems = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      elements = [];
      ref = this.elems;
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        elem = ref[i];
        if (i === idx) {
          elements = elements.concat(elems);
        }
        elements.push(elem);
      }
      return new mathJS.Tuple(elements);
    };

    Tuple.prototype.isEmpty = function() {
      return this._size() === 0;
    };


    /**
    * Removes the first occurences of the given elements.
    *
     */

    Tuple.prototype.remove = function() {
      var e, elem, elements, elems, i, j, k, len, len1;
      elems = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      elements = this.elems.clone();
      for (j = 0, len = elems.length; j < len; j++) {
        e = elems[j];
        for (i = k = 0, len1 = elements.length; k < len1; i = ++k) {
          elem = elements[i];
          if (!(elem.equals(e))) {
            continue;
          }
          elements.splice(i, 1);
          break;
        }
      }
      return new mathJS.Tuple(elements);
    };

    Tuple.prototype.removeAt = function(idx, n) {
      var elem, elems, i, j, len, ref;
      if (n == null) {
        n = 1;
      }
      elems = [];
      ref = this.elems;
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        elem = ref[i];
        if (i < idx || i >= idx + n) {
          elems.push(elem);
        }
      }
      return new mathJS.Tuple(elems);
    };

    Tuple.prototype.size = function() {
      return this._size;
    };

    Tuple.prototype.slice = function(startIdx, endIdx) {
      if (endIdx == null) {
        endIdx = this._size;
      }
      return new mathJS.Tuple(this.elems.slice(startIdx, endIdx));
    };

    Tuple.prototype.cardinality = Tuple.prototype.size;

    Tuple.prototype.extendBy = Tuple.prototype.add;

    Tuple.prototype.get = Tuple.prototype.at;

    Tuple.prototype.has = Tuple.prototype.contains;

    Tuple.prototype.addAt = Tuple.prototype.insert;

    Tuple.prototype.insertAt = Tuple.prototype.insert;

    Tuple.prototype.reduceBy = Tuple.prototype.remove;

    return Tuple;

  })();

}).call(this);

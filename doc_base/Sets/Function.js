// Generated by CoffeeScript 1.9.3
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  mathJS.Function = (function(superClass) {
    extend(Function, superClass);

    function Function(name, expression, domain, range) {
      this.name = name;
      this.expression = expression;
      if (domain instanceof mathJS.Set) {
        this.domain = domain;
      } else {
        this.domain = new mathJS.Set(expression.getVariables());
      }
      if (range instanceof mathJS.Set) {
        this.range = range;
      } else {
        this.range = expression.getSet();
      }
      this._cache = {};
      this.caching = true;
      Function.__super__.constructor.call(this);
    }


    /**
    * Empty the cache or reset to given cache.
    * @method clearCache
    * @param cache {Object}
    * @return mathJS.Function
    * @chainable
    *
     */

    Function.prototype.clearCache = function(cache) {
      if (cache == null) {
        this._cache = {};
      } else {
        this._cache = cache;
      }
      return this;
    };


    /**
    * Evaluate the function for given values.
    * @method get
    * @param values {Array|Object}
    * If an array the first value will be associated with the first variable name. Otherwise an object like {x: 42} is expected.
    * @return
    *
     */

    Function.prototype["eval"] = function() {
      var i, j, len, tmp, val, value, values, varName;
      values = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      tmp = {};
      if (values instanceof Array) {
        for (i = j = 0, len = values.length; j < len; i = ++j) {
          value = values[i];
          tmp[this.variableNames[i]] = value;
        }
        values = tmp;
      }
      for (varName in values) {
        val = values[varName];
        if (!domain.contains(val)) {
          return null;
        }
      }
      return this.expression["eval"](values);
    };

    Function.prototype.at = Function["eval"];

    Function.prototype.get = Function["eval"];

    return Function;

  })(mathJS.Set);

}).call(this);
